<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
	version="4.0">
	<!-- [옵션]================================================================================= -->
	<!-- 1) WAS가 web.xml에 listener 태그를 해석 할 때 ContextLoaderListener 객체생성 2) 
		ContextLoaderListener객체는 내부에 Root-WebApplicationContext 생성 3) Root-WebApplicationContext가 
		관리할 객체(빈)의 설정파일 경로를 param-value 찾음 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- Root WebApplicationContext가 관리 할 객체(빈) 설정 파일 위치 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<!-- classpath는 산출물 내부(WAR 파일)에 WEB-INF/classes 폴더를 말한다. -->
		<!-- src/main/java, src/main/resources 폴더의 내용들이 취합되어 classes에 들어감 -->
		<param-value>classpath:spring/root/*.xml</param-value>
		<!-- <param-value>/WEB-INF/spring/root/config.xml</param-value> -->
	</context-param>
	<!-- ======================================================================================= -->
	<!-- [필수]================================================================================= -->
	<!-- 1) WAS가 web.xml에 servlet 태그를 해석 할 때 DispatcherServlet 객체생성 2) DispatcherServlet 
		객체는 내부에 WebApplicationContext 생성 3) WebApplicationContext가 관리할 객체(빈)의 설정파일 
		경로를 param-value 찾음 -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<!-- classpath는 산출물 내부(WAR 파일)에 WEB-INF/classes 폴더를 말한다. -->
			<!-- src/main/java, src/main/resources 폴더의 내용들이 취합되어 classes에 들어감 -->
			<param-value>classpath:spring/dispatcher/*.xml</param-value>
			<!-- <param-value>/WEB-INF/spring/dispatcher/config.xml</param-value> -->
		</init-param>
		<!-- 404 에러 처리 두번 째 방법 -->
		<init-param>
			<param-name>throwExceptionIfNoHandlerFound</param-name>
			<param-value>true</param-value>
		</init-param>


		<load-on-startup>1</load-on-startup><!-- 서블릿을 init-param을 해석하는 시점에 이 태그가 
			있어야 생성된다. -->
		<!-- Multipart/form-data를 해석 하기 위한 설정 -->
		<multipart-config>
			<location>C:/Temp</location>
			<max-file-size>20971520</max-file-size><!-- 한 파일 당 20메가 까지 -->
			<max-request-size>10485766</max-request-size><!-- 전체 요청의 크기 : 문자파트+파일*파일갯수 -->
			<file-size-threshold>1024</file-size-threshold><!-- 임시파일 공간 부족할 때 쓰는 공간, 단위가 byte -->
		</multipart-config>

	</servlet>
	<!-- 4)브라우저(클라이언트)가 요청하는 모든 URL을 DispatcherServlet이 처리하도록 설정 -->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<!-- ======================================================================================= -->
	<!-- [옵션]================================================================================= -->
	<!-- 1) WAS가 web.xml에 servlet 태그를 해석 할 때 DispatcherServlet 객체생성 2) DispatcherServlet 
		객체는 내부에 WebApplicationContext 생성 3) WebApplicationContext가 관리할 객체(빈)의 설정파일 
		경로를 param-value 찾음 -->
	<!-- <servlet> <servlet-name>dispatcher2</servlet-name> <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class> 
		<init-param> <param-name>contextConfigLocation</param-name> classpath는 산출물 
		내부(WAR 파일)에 WEB-INF/classes 폴더를 말한다. src/main/java, src/main/resources 폴더의 
		내용들이 취합되어 classes에 들어감 <param-value>classpath:spring/dispatcher2/*.xml</param-value> 
		<param-value>/WEB-INF/spring/dispatcher2/config.xml</param-value> </init-param> 
		<load-on-startup>1</load-on-startup>서블릿을 init-param을 해석하는 시점에 이 태그가 있어야 생성된다. 
		</servlet> -->
	<!-- ======================================================================================= -->
	<!-- [필수]================================================================================= -->
	<!-- Filter의 역할 : DispatcherServlet이 실행 되기 전에 전처리 하는 역할 -->
	<!-- CharacterEncodingFilter의 역할 : DispatcherSerble이 실행 되기 전에 한글 데이터를 복원하는 
		역할 -->
	<filter>
		<filter-name>characterEncodingFilter</filter-name><!-- alias 객체를 참조하는 변수 
			이름, 밑에 name 참조함 -->
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class><!-- 
			filterclass의 정확한 이름 -->
		<init-param>
			<param-name>encoding</param-name><!-- 예약어 -->
			<param-value>UTF-8</param-value><!-- 문자셋 -->
		</init-param>
	</filter>
	<!-- 브라우저(클라이언트)가 요청하는 모든 URL을 CharacterEncodingFilter가 동작하도록 설정 -->
	<filter-mapping>
		<filter-name>characterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern><!-- /* 뜻 : 어떠한 모든 요청이든 filter가 먼저 실행하고 dipatcher가 
			실행 된다. -->
	</filter-mapping>


	<!-- 로그인 필터 인터페이스 실습을 위해 주석처리 -->
	<!-- <filter> <filter-name>LoginCheckFilter</filter-name> <filter-class>com.mycompany.springframework.filter.LoginCheckFilter</filter-class> 
		</filter> <filter-mapping> <filter-name>LoginCheckFilter</filter-name> <url-pattern>/*</url-pattern> 
		</filter-mapping> -->

	<!-- Spring Security 구동을 위한 필터 등록 -->
	<filter>		<!-- ┌예약어라서 꼭 이거로 써야함 -->
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!-- 404 에러 처리 첫번째 방법 -->
	<!-- <error-page> <error-code>404</error-code> <location>/WEB-INF/views/ch10/404.jsp</location> 
		</error-page> -->



</web-app>